[{"/home/radhika/project/src/index.js":"1","/home/radhika/project/src/App.js":"2","/home/radhika/project/src/reportWebVitals.js":"3","/home/radhika/project/src/NavBar.js":"4","/home/radhika/project/src/Playlist.js":"5","/home/radhika/project/src/PlaylistTracks.js":"6","/home/radhika/project/src/AlbumTracks.js":"7","/home/radhika/project/src/Login.js":"8","/home/radhika/project/src/Rdirect.js":"9","/home/radhika/project/src/ArtistTracks.js":"10","/home/radhika/project/src/Artist.js":"11","/home/radhika/project/src/Album.js":"12","/home/radhika/project/src/SpotifyLogin.js":"13","/home/radhika/project/src/Home.js":"14","/home/radhika/project/src/Profile.js":"15","/home/radhika/project/src/Quiz.js":"16","/home/radhika/project/src/DimensionsProvider.js":"17","/home/radhika/project/src/SoundfontProvider.js":"18"},{"size":547,"mtime":1610416900546,"results":"19","hashOfConfig":"20"},{"size":1567,"mtime":1617591470728,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1607144941305,"results":"22","hashOfConfig":"20"},{"size":1257,"mtime":1617711593809,"results":"23","hashOfConfig":"20"},{"size":2078,"mtime":1617711629710,"results":"24","hashOfConfig":"20"},{"size":1557,"mtime":1617441287971,"results":"25","hashOfConfig":"20"},{"size":1450,"mtime":1617591446086,"results":"26","hashOfConfig":"20"},{"size":1061,"mtime":1617711587229,"results":"27","hashOfConfig":"20"},{"size":845,"mtime":1617356114094,"results":"28","hashOfConfig":"20"},{"size":1467,"mtime":1617591551401,"results":"29","hashOfConfig":"20"},{"size":3982,"mtime":1617710964383,"results":"30","hashOfConfig":"20"},{"size":3686,"mtime":1617591444210,"results":"31","hashOfConfig":"20"},{"size":1268,"mtime":1617591603961,"results":"32","hashOfConfig":"20"},{"size":2547,"mtime":1617711562621,"results":"33","hashOfConfig":"20"},{"size":9493,"mtime":1617711635922,"results":"34","hashOfConfig":"20"},{"size":15312,"mtime":1617711648542,"results":"35","hashOfConfig":"20"},{"size":341,"mtime":1611025969088,"results":"36","hashOfConfig":"20"},{"size":2911,"mtime":1617711845950,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1xzec9a",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/radhika/project/src/index.js",[],["84","85"],"/home/radhika/project/src/App.js",[],"/home/radhika/project/src/reportWebVitals.js",[],"/home/radhika/project/src/NavBar.js",[],"/home/radhika/project/src/Playlist.js",["86"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Col, Row } from \"react-bootstrap\"\nimport ls from 'local-storage';\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nclass Playlist extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            playlists: [],\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        this.getPlaying();\n    }\n    getPlaying() {\n        SpotifyWebApi.getUserPlaylists()\n            .then((response) => {\n                response.items.map((item) => {\n                    this.setState({\n                        playlists: [...this.state.playlists,\n                        {\n                            id: item.id,\n                            name: item.name\n                        }\n                        ],\n                    })\n                })\n            })\n    }\n    render() {\n        return (\n            <div className=\"defaultBackground\">\n                <br />\n\n                <Container fluid=\"true\" >\n                    <Row>\n                        <Col className=\"d-flex justify-content-center align-items-center d-inline-block\"> <h3>CHOOSE THE PLAYLIST:</h3></Col>\n                    </Row>\n                </Container>\n                <br />\n\n                <Container fluid=\"true\">\n                    {this.state.playlists.map(item => (\n                        <Row>\n                            <Col className=\"mt-1\" md={{ span: 6, offset: 3 }}>\n                                <Link to={`/playlistTrack/${item.id}`} style={{ textDecoration: 'inherit' }}>\n                                    <Button fluid=\"true\" variant=\"dark\" style={{ backgroundColor: \"#9ca9aa\", border: \"none\" }} size=\"lg\" block>{item.name}</Button>\n                                </Link>\n                            </Col>\n                        </Row>\n                    ))}\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Playlist;","/home/radhika/project/src/PlaylistTracks.js",["87"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport ls from 'local-storage';\nimport Quiz from \"./Quiz\";\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nvar userID = ls.get('userID');\nclass PlaylistTracks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playlistID: this.props.match.params.id,\n            songs: [],\n            displayResult: false\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        this.getSongs();\n    }\n    getSongs() {\n        SpotifyWebApi.getPlaylistTracks(userID, this.state.playlistID)\n            .then((response) => {\n                response.items.map((item) => {\n                    this.setState({\n                        songs: [...this.state.songs,\n                        {\n                            id: item.track.id,\n                            name: item.track.name,\n                        }\n                        ],\n                    })\n                })\n                this.setState({\n                    displayResult: true,\n                })\n            });\n\n    }\n    render() {\n        return (\n            <div>\n                {this.state.displayResult ?\n                    <div>\n                        {ls.set('quizType', 'Playlist')}\n                        <Quiz arr={this.state.songs} quizID={this.state.pid} />\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    }\n}\nexport default PlaylistTracks;","/home/radhika/project/src/AlbumTracks.js",["88"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport ls from 'local-storage';\nimport Quiz from \"./Quiz\";\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nclass AlbumTracks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listId: this.props.match.params.id,\n            songs: [],\n            displayResult: false\n\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        this.getSongs();\n    }\n    getSongs() {\n        SpotifyWebApi.getAlbumTracks(this.state.listId)\n            .then((response) => {\n                response.items.map((item) => {\n                    this.setState({\n                        songs: [...this.state.songs,\n                        {\n                            id: item.id,\n                        }\n                        ],\n                    })\n                })\n                this.setState({\n                    displayResult: true\n                })\n            });\n    }\n    render() {\n        return (\n            <div>\n                {this.state.displayResult ?\n                    <div>\n                        {ls.set('quizType', 'Album Tracks')}\n                        <Quiz arr={this.state.songs} quizID={this.state.listId} />\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    }\n}\nexport default AlbumTracks;","/home/radhika/project/src/Login.js",[],"/home/radhika/project/src/Rdirect.js",["89"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport ls from 'local-storage';\nimport Home from \"./Home\";\n\nls.set('isLoggedIn',true);\nconst SpotifyWebApi = new Spotify();\nclass Rdirect extends React.Component{\n    constructor(){\n        super();\n        const params = this.getHashParams();\n        if(params.access_token){\n            SpotifyWebApi.setAccessToken(params.access_token)\n        }\n        ls.set('accessToken', params.access_token);\n    }\n    getHashParams() {\n        var hashParams = {};\n        var e, r = /([^&;=]+)=?([^&;]*)/g,\n            q = window.location.hash.substring(1);\n        while ( e = r.exec(q)) {\n           hashParams[e[1]] = decodeURIComponent(e[2]);\n        }\n        return hashParams;\n    }\n    render(){\n        return(\n            <Home />\n        )\n    }\n}\nexport default Rdirect;\n","/home/radhika/project/src/ArtistTracks.js",["90"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport ls from 'local-storage';\nimport Quiz from \"./Quiz\";\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nclass ArtistTracks extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            listId: this.props.match.params.id,\n            songs: [],\n            displayResult: false\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        this.getSongs();\n    }\n    getSongs() {\n        SpotifyWebApi.getArtistTopTracks(this.state.listId, \"IN\")\n            .then((response) => {\n                response.tracks.map((item) => {\n                    this.setState({\n                        songs: [...this.state.songs,\n                        {\n                            id: item.id,\n                        }\n                        ],\n                    })\n                })\n                this.setState({\n                    displayResult: true\n                })\n            });\n    }\n    render() {\n        return (\n            <div>\n                {this.state.displayResult ?\n                    <div>\n                        {ls.set('quizType', 'Artist Top Tracks')}\n                        <Quiz arr={this.state.songs} quizID={this.state.listId} />\n                    </div>\n                    : null\n                }\n            </div>\n        )\n    }\n}\nexport default ArtistTracks;","/home/radhika/project/src/Artist.js",["91","92","93"],"import React from \"react\";\nimport Spotify from 'spotify-web-api-js';\nimport { Link } from \"react-router-dom\";\nimport ls from 'local-storage';\nimport { Button, Container, Form, Row, Col } from \"react-bootstrap\";\nimport Img from \"./icon/icon.jpg\"\nimport \"./App.css\"\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nclass Artist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            list: [],\n            displayResult: false,\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n    }\n    getAlbum() {\n        SpotifyWebApi.searchArtists(this.state.query, { limit: 12 })\n            .then((response) => {\n                this.state.list.length = 0;\n                response.artists.items.map((item) => {\n                    var img = '';\n                    if (item.images.length === 0) {\n                        img = Img;\n                    } else {\n                        img = item.images[0].url;\n                    }\n                    this.setState({\n                        list: [...this.state.list,\n                        {\n                            id: item.id,\n                            name: item.name,\n                            image: img\n                        }\n                        ],\n                    })\n                })\n                this.setState({\n                    displayResult: true,\n                })\n            })\n    }\n    keyPress(e) {\n        if (e.key === 'Enter') {\n            this.getAlbum();\n            e.preventDefault();\n        }\n    }\n    handleChange(event) {\n        const key = event.target.name;\n        const value = event.target.value;\n        this.setState({ [key]: value });\n    }\n    render() {\n        return (\n            <div >\n                <br />\n                <Container>\n                    <Row>\n                        <Col>\n                            <Form.Group>\n                                <Form.Control size=\"lg\" type=\"text\" name=\"query\" placeholder=\"Search Artist\" onKeyDown={this.keyPress.bind(this)} onChange={this.handleChange.bind(this)} />\n                                <Row className=\"rwid mt-2\">\n                                    <Col style={{ textAlign: \"center\" }}>\n                                        <Button style={{ width: 150 }} variant=\"dark\" size=\"lg\" onClick={this.getAlbum.bind(this)}> Search</Button>{' '}\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    {this.state.displayResult ?\n                        <div>\n                            {this.state.list.map((item) => {\n                                return (\n                                    <Link style={{ textDecoration: 'inherit' }} to={{ pathname: `/artistTopTracks/${item.id}`, val: this.state.val }}  >\n                                        <Row className=\"dispItems\" xs={1} md={2} >\n                                            <Col style={{ textAlign: \"center\" }}>\n                                                <img alt=\"Artist-image\" src={item.image} height=\"200\" width=\"200\" />\n                                            </Col>\n                                            <Col style={{ textDecoration: 'inherit', color: \"black\" }} className=\"d-flex justify-content-center align-items-center d-inline-block\">\n                                                {item.name}\n                                            </Col>\n                                        </Row>\n                                    </Link>\n                                )\n                            })}\n                        </div>\n                        : null\n                    }\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Artist;","/home/radhika/project/src/Album.js",["94","95"],"import React from \"react\";\nimport Spotify from 'spotify-web-api-js';\nimport { Link } from \"react-router-dom\";\nimport ls from 'local-storage';\nimport { Button, Form, Row, Col, Container } from \"react-bootstrap\";\nimport \"./App.css\"\nconst AT = ls.get('accessToken');\n\nconst SpotifyWebApi = new Spotify();\n\nclass Album extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            query: '',\n            list: [],\n            displayResult: false,\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n    }\n    getAlbum() {\n        SpotifyWebApi.searchAlbums(this.state.query, { limit: 12 })\n            .then((response) => {\n                response.albums.items.map((item) => {\n                    this.setState({\n                        list: [...this.state.list,\n                        {\n                            id: item.id,\n                            name: item.name,\n                            image: item.images[0].url\n                        }\n                        ],\n                    })\n                })\n                this.setState({\n                    displayResult: true,\n                })\n            })\n\n    }\n    keyPress(e) {\n        if (e.key === 'Enter') {\n            this.getAlbum();\n            e.preventDefault();\n        }\n    }\n    handleChange(event) {\n        const key = event.target.name;\n        const value = event.target.value;\n        this.setState({ [key]: value });\n    }\n    render() {\n        return (\n            <div >\n                <br />\n                <Container>\n                    <Row>\n                        <Col>\n                            <Form.Group>\n                                <Form.Control size=\"lg\" type=\"text\" name=\"query\" placeholder=\"Search Album\" onKeyDown={this.keyPress.bind(this)} onChange={this.handleChange.bind(this)} />\n                                <Row className=\" mt-2\">\n                                    <Col style={{ textAlign: \"center\" }}>\n                                        <Button style={{ width: 150 }} variant=\"dark\" size=\"lg\" onClick={this.getAlbum.bind(this)}> Search</Button>{' '}\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container>\n                    {this.state.displayResult ?\n                        <div>\n                            {this.state.list.map((item) => {\n                                return (\n                                    <Link style={{ textDecoration: 'inherit' }} to={{ pathname: `/albumTracks/${item.id}`, val: this.state.val }}  >\n                                        <Row className=\"dispItems\" xs={1} md={2} >\n                                            <Col style={{ textAlign: \"center\" }}>\n                                                <img src={item.image} height=\"200\" width=\"200\" alt=\"Album-Image\" />\n                                            </Col>\n                                            <Col style={{ textDecoration: 'inherit', color: \"black\" }} className=\"d-flex justify-content-center align-items-center d-inline-block\">\n                                                {item.name}\n                                            </Col>\n                                        </Row>\n                                    </Link>\n                                )\n                            })}\n                        </div>\n                        : null\n                    }\n                </Container>\n            </div>\n        )\n    }\n}\nexport default Album;","/home/radhika/project/src/SpotifyLogin.js",[],"/home/radhika/project/src/Home.js",[],"/home/radhika/project/src/Profile.js",["96","97"],"import React from \"react\"\nimport Spotify from 'spotify-web-api-js';\nimport ls from 'local-storage';\nimport axios from \"axios\"\nimport UserIcon from \"./icon/usericon.jpg\";\nimport Chart from \"react-google-charts\";\nimport { Container, Row, Col, Image, Table } from \"react-bootstrap\";\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\nconst userID = ls.get('userID');\nclass Profile extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userProfile: [],\n            skippedSum: '',\n            corrSum: '',\n            incorrSum: '',\n            userName: ''\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        axios.get('http://localhost:8080/user', {\n            params: {\n                userId: userID,\n                accessToken: AT\n            }\n        })\n            .then((response) => {\n                var correctSum = 0;\n                var incorrectSum = 0;\n                var songs = 0;\n                var skippedSum = 0;\n                response.data.map((item) => {\n                    correctSum += item.correctVal;\n                    incorrectSum += item.incorrectVal;\n                    skippedSum += item.skippedVal;\n                    songs += item.correctVal + item.incorrectVal + item.skippedVal;\n                    this.setState({\n                        skippedSum: skippedSum,\n                        corrSum: correctSum,\n                        incorrSum: incorrectSum,\n                        totalSongs: songs,\n                        userProfile: [...this.state.userProfile,\n                        {\n                            quizDate: item.quizDate,\n                            quizId: item.quizId,\n                            quizType: item.quizType,\n                            correct: item.correctVal,\n                            incorrect: item.incorrectVal,\n                            skipped: item.skippedVal\n                        }\n                        ],\n                    })\n                })\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n        this.init();\n    }\n    init() {\n        SpotifyWebApi.getMe(userID)\n            .then((response) => {\n                var img = '';\n                if (response.images.length === 0) {\n                    img = UserIcon;\n                } else {\n                    img = response.images[0].url;\n                }\n                this.setState({\n                    userName: response.display_name,\n                    userImage: img,\n                    result: true,\n                })\n            });\n\n    }\n\n    render() {\n        var arr = Array.from(Array(this.state.userProfile.length + 1), () => new Array(4));\n        arr[0] = ['DATE', 'CORRECT', 'INCORRECT', 'SKIPPED'];\n        var index = 1;\n        this.state.userProfile.map((item) => {\n            arr[index] = [item.quizDate, item.correct, item.incorrect, item.skipped]\n            index++;\n        })\n        var isprofile = false;\n        if (this.state.userProfile.length === 0) {\n            isprofile = false;\n        } else {\n            isprofile = true;\n        }\n        index = 0;\n        return (\n            <div>\n                {this.state.result ?\n                    <>\n                        <Container fluid=\"true\">\n                            <Row style={{ paddingTop: \"1%\", backgroundColor: \"#3d7475\" }}>\n                                <Col style={{ marginLeft: \"5%\", textAlign: \"right\" }} >\n                                    <p style={{ color: \"white\", fontSize: \"110%\", paddingRight: \"4%\" }}>Hello {this.state.userName} &nbsp;<span style={{ fontSize: \"110%\" }}>|</span>\n                            &nbsp;&nbsp;<Image src={this.state.userImage} roundedCircle height=\"60px\" width=\"60px\" /></p>\n                                </Col>\n                            </Row>\n                        </Container>\n                        <br />\n                        {isprofile ?\n                            <Container>\n                                <Row xs={1} md={2} >\n                                    <Col style={{ textAlign: \"right\" }}>\n                                        <Chart\n\n                                            chartType=\"PieChart\"\n                                            loader={<div>Loading Chart</div>}\n                                            options={{\n                                                chartArea: { width: \"90%\", height: \"90%\" },\n                                                slices: [\n                                                    {\n                                                        color: \"#2BB673\"\n                                                    },\n                                                    {\n                                                        color: \"#d91e48\"\n                                                    },\n                                                    {\n                                                        color: \"#007fad\"\n                                                    }\n                                                ],\n                                                legend: 'none',\n                                            }}\n                                            data={[\n                                                ['Task', 'Quiz Result'],\n                                                ['Correct', this.state.corrSum],\n                                                ['Incorrect', this.state.incorrSum],\n                                                ['Skipped', this.state.skippedSum],\n                                            ]}\n                                        />\n                                    </Col>\n                                    <Col>\n                                        <Chart\n                                            width=\"100%\"\n                                            height=\"110%\"\n                                            chartType=\"LineChart\"\n                                            loader={<div>Loading Chart</div>}\n                                            data={arr}\n                                            options={{\n                                                chartArea: { top: \"5%\" },\n                                                hAxis: {\n                                                    title: 'Date',\n                                                },\n                                                vAxis: {\n                                                    title: 'Songs',\n                                                },\n                                                legend: { position: 'bottom' },\n                                                series: {\n                                                    0: { color: '#2BB673' },\n                                                    1: { color: '#d91e48' },\n                                                    2: { color: '#007fad' },\n                                                }\n                                            }}\n                                        />\n                                    </Col>\n                                </Row>\n                                <br />\n                                <Row>\n                                    <h4>QUIZ HISTORY</h4>\n                                    <Table striped bordered hover >\n                                        <thead>\n                                            <tr>\n                                                <th style={{ width: \"20%\" }}>#</th>\n                                                <th style={{ width: \"20%\" }}>DATE</th>\n                                                <th style={{ width: \"20%\" }}>TYPE</th>\n                                                <th style={{ width: \"20%\" }}>SCORE</th>\n                                                <th style={{ width: \"20%\" }}>TOTAL</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n\n                                            {this.state.userProfile.map((item) => {\n\n                                                index++;\n                                                return (\n                                                    <tr>\n                                                        <td>{index}</td>\n                                                        <td>{item.quizDate}</td>\n                                                        <td>{item.quizType}</td>\n                                                        <td>{item.correct}</td>\n                                                        <td>{item.skipped + item.correct + item.incorrect}</td>\n                                                    </tr>\n                                                )\n                                            }\n                                            )}\n\n                                        </tbody>\n                                    </Table>\n                                </Row>\n                            </Container>\n                            :\n                            <h2 style={{ textAlign: \"center\" }}>YOU HAVE NOT TESTED YOUR SKILLS YET!</h2>\n                        }\n                    </>\n                    : null}\n            </div>\n        )\n    }\n}\nexport default Profile;","/home/radhika/project/src/Quiz.js",["98"],"import React from \"react\";\nimport Spotify from 'spotify-web-api-js';\nimport \"./App.css\";\nimport ls from 'local-storage';\nimport Modal from 'react-modal';\nimport { Container, Row, Col, Button, Form, Card } from 'react-bootstrap';\nimport Image from \"./icon/score_card.jpg\";\nimport { toast } from 'react-toastify';\nimport axios from \"axios\"\nimport 'react-toastify/dist/ReactToastify.css';\n\n//for importing piano\nimport DimensionsProvider from './DimensionsProvider.js';\nimport SoundfontProvider from './SoundfontProvider';\nimport { Piano, MidiNumbers } from 'react-piano';\nimport 'react-piano/dist/styles.css';\n\nconst audioContext = new (window.AudioContext || window.webkitAudioContext)();\nconst soundfontHostname = 'https://d1pzp51pvbm36p.cloudfront.net';\nconst noteRange = {\n    first: MidiNumbers.fromNote('c3'),\n    last: MidiNumbers.fromNote('f4'),\n};\n\nfunction ResponsivePiano(props) {\n    return (\n        <DimensionsProvider>\n            {({ containerWidth, containerHeight }) => (\n                <SoundfontProvider\n                    instrumentName=\"acoustic_grand_piano\"\n                    audioContext={audioContext}\n                    hostname={soundfontHostname}\n                    render={({ isLoading, playNote, stopNote }) => (\n                        <Piano\n                            noteRange={noteRange}\n                            width={containerWidth}\n                            height={containerHeight}\n                            playNote={playNote}\n                            stopNote={stopNote}\n                            disabled={isLoading}\n                            {...props}\n                        />\n                    )}\n                />\n            )}\n        </DimensionsProvider>\n    );\n}\nvar viewportWidth = document.documentElement.clientWidth;\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n    }\n};\nModal.setAppElement(document.getElementById('root'));\ntoast.configure()\n\nconst SpotifyWebApi = new Spotify();\nconst AT = ls.get('accessToken');\n\n\nclass Quiz extends React.Component {\n    constructor(props) {\n        super(props);\n        var today = new Date(),\n            date = today.getDate() + '-' + (today.getMonth() + 1) + '-' + today.getFullYear();\n        this.state = {\n            currentDate: date,\n            api_key: 0,\n            api_mode: 0,\n            correct: 0,\n            incorrect: 0,\n            key: 0,\n            mode: 1,\n            currentTrackURL: '',\n            bigview: true,\n            song: [],\n            currentSongIndex: 0,\n            currentTrackID: '',\n            quizCompleted: false,\n            piano: false,\n            pbut: 'Open Piano'\n        }\n    }\n    componentDidMount() {\n        SpotifyWebApi.setAccessToken(AT);\n        this.init();\n    }\n    init() {\n        var songList = [];\n        this.props.arr.map((item) => {\n            var obj = {};\n            obj[\"id\"] = item.id;\n            obj[\"taken\"] = false;\n            songList.push(obj);\n        })\n        var view;\n        if (viewportWidth <= 519) {\n            view = false;\n        } else {\n            view = true;\n        }\n        this.setState({\n            bigview: view,\n            song: songList,\n        }, () => {\n            this.seturl();\n\n        })\n    }\n    seturl() {\n        if (this.state.song.length !== 0) {\n            this.setState({\n                currentTrackURL: 'https://open.spotify.com/embed/track/' + this.state.song[0].id,\n                currentTrackID: this.state.song[0].id\n            })\n        }\n    }\n    finalResult() {\n        var quizdetails = {\n            userId: ls.get('userID'),\n            quizDate: this.state.currentDate,\n            quizType: ls.get('quizType'),\n            quizId: this.props.quizID,\n            correctVal: this.state.correct,\n            incorrectVal: this.state.incorrect,\n            skippedVal: this.state.song.length - this.state.correct - this.state.incorrect\n        }\n        axios.post('http://localhost:8080/entry', quizdetails, {\n            params: {\n                userId: ls.get('userID'),\n                accessToken: ls.get('accessToken')\n            }\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n        this.setState({\n            quizCompleted: true\n        })\n    }\n    playNext() {\n        var temporary_ID = '';\n        var temporary_index = 0;\n        if (this.state.currentSongIndex === this.state.song.length - 1) {\n            this.finalResult();\n        } else {\n            temporary_index = this.state.currentSongIndex + 1;\n            temporary_ID = this.state.song[temporary_index].id\n            var track_URL = 'https://open.spotify.com/embed/track/' + temporary_ID;\n            this.setState(\n                {\n                    currentSongIndex: temporary_index,\n                    currentTrackURL: track_URL,\n                    currentTrackID: this.state.song[temporary_index].id,\n                });\n        }\n\n    }\n    generateResult() {\n        if (this.state.song[this.state.currentSongIndex].taken === false) {\n            var res1 = this.state.correct;\n            var res2 = this.state.incorrect;\n            if (this.state.api_key === this.state.key && this.state.api_mode === this.state.mode) {\n                res1 += 1;\n                toast(\"CORRECT!\", {\n                    autoClose: 1500,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                res2 += 1;\n                toast(\"INCORRECT!\", {\n                    autoClose: 2000,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            }\n            let song = [...this.state.song];\n            let s = {\n                ...song[this.state.currentSongIndex],\n                taken: true\n            }\n            song[this.state.currentSongIndex] = s;\n            this.setState({\n                correct: res1,\n                incorrect: res2,\n                song\n            }, () => {\n\n                if (this.state.api_key === this.state.key && this.state.api_mode === this.state.mode) {\n                    this.playNext();\n                }\n            })\n        } else {\n            if (this.state.api_key === this.state.key && this.state.api_mode === this.state.mode) {\n                this.playNext();\n                toast(\"Correct! But score won't be counted\", {\n                    autoClose: 2000,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                });\n            } else {\n                toast(\"Keep Trying!\", {\n                    autoClose: 2000,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: true,\n                    progress: undefined,\n                })\n            }\n        }\n    }\n    getresult() {\n        SpotifyWebApi.getAudioFeaturesForTrack(this.state.currentTrackID)\n            .then((response) => {\n                this.setState({\n                    api_key: response.key,\n                    api_mode: response.mode,\n\n                }, () => {\n                    this.generateResult();\n                })\n            })\n    }\n    handleChange(event) {\n        const key = event.target.name;\n        const value = event.target.value;\n        this.setState({ [key]: value });\n    }\n    handleSubmit() {\n        if (this.state.song.length !== 0) {\n            this.getresult();\n        }\n\n    }\n    playPiano() {\n        var pval = false;\n        var p = '';\n        if (this.state.piano) {\n            pval = false;\n            p = \"Open Piano\"\n        } else {\n            pval = true;\n            p = \"Close Piano\"\n        }\n        this.setState({\n            piano: pval,\n            pbut: p\n        })\n    }\n    render() {\n        return (\n            <div style={{ backgroundColor: \"#f8f9f5\" }}>\n                <br />\n                <Container fluid=\"true\">\n                    <Row xs={1} md={2}>\n                        <Col style={{ textAlign: \"center\" }} fluid=\"true\">\n                            <br />\n                            {this.state.bigview ?\n                                <iframe title=\"player-big-view\" src={this.state.currentTrackURL} width=\"300\" height=\"380\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n                                :\n                                <iframe title=\"player-small-view\" src={this.state.currentTrackURL} width=\"360\" height=\"80\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n                            }\n                            <br />\n\n                        </Col>\n                        <Col className=\"mt-2 d-flex justify-content-center align-items-center d-inline-block\">\n                            <br />\n                            <Form onSubmit={this.handleSubmit} style={{ width: \"85%\" }}>\n                                <Form.Group >\n                                    <Form.Label>{this.state.bigview ? <h4><b>WHATS THE KEY?</b></h4> : <h6><br /><b>WHATS THE KEY?</b></h6>}</Form.Label>\n                                    <br />\n\n                                    <Form.Control as=\"select\" name=\"key\" onChange={this.handleChange.bind(this)}>\n                                        <option value=\"0\">C</option>\n                                        <option value=\"1\">Db / C#</option>\n                                        <option value=\"2\">D</option>\n                                        <option value=\"3\">Eb</option>\n                                        <option value=\"4\">E</option>\n                                        <option value=\"5\">F</option>\n                                        <option value=\"6\">Gb / F#</option>\n                                        <option value=\"7\">G</option>\n                                        <option value=\"8\">Ab</option>\n                                        <option value=\"9\">A</option>\n                                        <option value=\"10\">Bb</option>\n                                        <option value=\"11\">B / Cb</option>\n                                    </Form.Control>\n                                    <br />\n                                    <Form.Control as=\"select\" name=\"mode\" mode={this.state.mode} onChange={this.handleChange.bind(this)}>\n                                        <option value=\"1\">Major</option>\n                                        <option value=\"0\">Minor</option>\n                                    </Form.Control>\n                                    <br />\n                                    <Row xs={1} md={3} className=\"mt-2 d-flex justify-content-center align-items-center d-inline-block\" >\n                                        <Col>\n                                            <Button className=\"mt-2\" style={{ width: 150 }} variant=\"info\" onClick={this.handleSubmit.bind(this)} >\n                                                GUESS\n                                        </Button>{' '}\n                                        </Col>\n                                        <Col>\n                                            <Button className=\"mt-2\" style={{ width: 150 }} variant=\"dark\" onClick={this.playNext.bind(this)} >\n                                                SKIP\n                                        </Button>{' '}\n                                        </Col>\n                                        <Col>\n                                            <Button className=\"mt-2\" style={{ width: 150 }} variant=\"outline-dark\" onClick={this.playPiano.bind(this)} >\n                                                {this.state.pbut}\n                                            </Button>{' '}\n                                        </Col>\n                                    </Row>\n                                    <br />\n                                    <Row >\n                                        <Col style={{ overflow: \"auto\", display: \"block\", }}>\n                                            {this.state.piano ?\n                                                <ResponsivePiano /> : null\n                                            }\n                                        </Col>\n                                    </Row>\n                                </Form.Group>\n                            </Form>\n                        </Col>\n                    </Row>\n                    <Row >\n                        <Col className=\"mt-2 d-flex justify-content-center align-items-center d-inline-block\">\n                            <Card style={{ width: '20rem', textAlign: \"center\" }}>\n                                <Card.Header style={{ backgroundColor: \"#3b3c36\", color: \"white\", fontSize: \"130%\" }}><b>SCORE</b></Card.Header>\n                                <Card.Body style={{ backgroundColor: \"white\" }}>\n                                    <Card.Text>\n                                        CORRECT : {this.state.correct}\n                                        <br />\n                                INCORRECT: {this.state.incorrect}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n                {this.state.quizCompleted ?\n                    <Modal style={customStyles} isOpen={true}>\n                        <Card style={{ height: \"400px\", width: \"500px\" }}>\n                            <Card.Img src={Image} alt=\"Card image\" />\n                            <Card.ImgOverlay>\n                                <Card.Title style={{ textAlign: \"center\", color: \"#4B9CD3\", textShadow: \"2px 2px 0px  white, -2px -2px 0px  white, 2px -2px 0px white, -2px 2px 0px  white\" }}><b><h1>SCORE CARD</h1></b></Card.Title>\n                                <Card.Text style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n                                    <h4 >\n                                        CORRECT :{this.state.correct}\n                                        <br />\n                                INCORRECT :{this.state.incorrect}\n                                    </h4>\n                                </Card.Text>\n                                <div style={{ textAlign: \"center\", marginTop: \"100px\" }}>\n                                    <Button href=\"/home\" variant=\"outline-secondary\" style={{ width: \"100px\" }}>HOME</Button>\n                                    <Button onClick={() => window.location.reload(false)} variant=\"outline-secondary\" style={{ width: \"100px\" }} className=\"ml-3\">RE-TEST</Button>\n                                </div>\n                            </Card.ImgOverlay>\n                        </Card>\n                    </Modal>\n                    : null\n                }\n                <br />\n            </div>\n        )\n    }\n}\nexport default Quiz;","/home/radhika/project/src/DimensionsProvider.js",[],"/home/radhika/project/src/SoundfontProvider.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":22,"column":43,"nodeType":"105","messageId":"106","endLine":22,"endColumn":45},{"ruleId":"103","severity":1,"message":"104","line":24,"column":43,"nodeType":"105","messageId":"106","endLine":24,"endColumn":45},{"ruleId":"103","severity":1,"message":"104","line":24,"column":43,"nodeType":"105","messageId":"106","endLine":24,"endColumn":45},{"ruleId":"107","severity":1,"message":"108","line":21,"column":17,"nodeType":"109","messageId":"110","endLine":21,"endColumn":30},{"ruleId":"103","severity":1,"message":"104","line":23,"column":44,"nodeType":"105","messageId":"106","endLine":23,"endColumn":46},{"ruleId":"111","severity":1,"message":"112","line":25,"column":17,"nodeType":"113","endLine":25,"endColumn":32},{"ruleId":"103","severity":1,"message":"104","line":26,"column":51,"nodeType":"105","messageId":"106","endLine":26,"endColumn":53},{"ruleId":"114","severity":1,"message":"115","line":85,"column":49,"nodeType":"116","endLine":85,"endColumn":117},{"ruleId":"103","severity":1,"message":"104","line":26,"column":50,"nodeType":"105","messageId":"106","endLine":26,"endColumn":52},{"ruleId":"114","severity":1,"message":"115","line":80,"column":49,"nodeType":"116","endLine":80,"endColumn":116},{"ruleId":"103","severity":1,"message":"104","line":36,"column":42,"nodeType":"105","messageId":"106","endLine":36,"endColumn":44},{"ruleId":"103","severity":1,"message":"104","line":86,"column":43,"nodeType":"105","messageId":"106","endLine":86,"endColumn":45},{"ruleId":"103","severity":1,"message":"104","line":96,"column":35,"nodeType":"105","messageId":"106","endLine":96,"endColumn":37},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]